#!/usr/bin/env python3
#coding: utf-8
#
# convert EN 16931-3-3 eInvoice (CII) to SME common invoice
#
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
#
# (c) 2022 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
import datetime
from collections import defaultdict
import csv
import re
import json
import sys
import os
import argparse
import math

# DEBUG = None
SEP = os.sep

DIR = 'examples'

def file_path(pathname):
    if SEP == pathname[0:1]:
        return pathname
    else:
        dir = os.path.dirname(__file__)
        new_path = os.path.join(dir, pathname)
        return new_path

def convert_record(record):
	record = record.replace('Licensed under European Union Public Licence (EUPL) version 1.2.','MIT License (c) 2022 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)')
	record = record.replace('generated by Andreas Pelekies','edited by Nobuyuki SAMBUICHI')
	record = record.replace('2017-08-24 00:00:00 +0200','2022-11-08 00:00:00 +0900')

	record = record.replace('urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100','urn:un:unece:uncefact:data:standard:SMEinvoice')
	record = record.replace('../schema/D16B%20SCRDM%20(Subset)/uncoupled%20clm/CII/uncefact/data/standard/CrossIndustryInvoice_100pD16B.xsd"','../schema/SME/data/standard/SMEinvoice.xsd"')
	record = record.replace('xmlns:qdt="urn:un:unece:uncefact:data:standard:QualifiedDataType:100"','xmlns:qdt="urn:un:unece:uncefact:data:standard:QualifiedDataType:31"')
	record = record.replace('xmlns:udt="urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100"','xmlns:udt="urn:un:unece:uncefact:data:standard:UnqualifiedDataType:31"')
	record = record.replace('xmlns:rsm="urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100"','xmlns:rsm="urn:un:unece:uncefact:data:standard:SMEinvoice"')
	record = record.replace('xmlns:ram="urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100"','xmlns:ram="urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:31"')
	# 'xmlns:ccts="urn:un:unece:uncefact:documentation:standard:CoreComponentsTechnicalSpecification:2"'

	record = record.replace('ram:TelephoneUniversalCommunication','ram:TelephoneCIUniversalCommunication')
	record = record.replace('ram:EmailURIUniversalCommunication','ram:EmailURICIUniversalCommunication')
	record = record.replace('ram:BuyerOrderReferencedDocument','ram:BuyerOrderReferencedCIReferencedDocument')
	record = record.replace('ram:PayeeSpecifiedCreditorFinancialInstitution','ram:PayeeSpecifiedCICreditorFinancialInstitution')
	record = record.replace('ram:GrossPriceProductTradePrice','ram:GrossPriceProductCITradePrice')
	record = record.replace('ram:InvoiceReferencedDocument','ram:InvoiceReferencedCIReferencedDocument')
	record = record.replace('ram:ContractReferencedDocument','ram:ContractReferencedCIReferencedDocument')
	record = record.replace('ram:BillingSpecifiedPeriod','ram:BillingCISpecifiedPeriod')
	record = record.replace('ram:SpecifiedTradeAllowanceCharge','ram:SpecifiedCITradeAllowanceCharge')
	record = record.replace('ram:CategoryTradeTax','ram:CategoryCITradeTax')
	record = record.replace('ram:ShipToTradeParty','ram:ShipToCITradeParty')
	record = record.replace('ram:ActualDeliverySupplyChainEvent','ram:ActualDeliveryCISupplyChainEvent')
	record = record.replace('ram:AdditionalReferencedDocument','ram:AdditionalReferencedCIReferencedDocument')
	record = record.replace('ram:ApplicableProductCharacteristic','ram:ApplicableCIProductCharacteristic')
	record = record.replace('ram:ContractReferencedDocument','ram:ContractReferencedCIReferencedDocument')

	record = record.replace('ram:ApplicableHeaderTradeAgreement','ram:ApplicableCIIHSupplyChainTradeAgreement')
	record = record.replace('ram:ApplicableHeaderTradeDelivery','ram:ApplicableCIIHSupplyChainTradeDelivery')
	record = record.replace('ram:ApplicableHeaderTradeSettlement','ram:ApplicableCIIHSupplyChainTradeSettlement')
	record = record.replace('ram:ApplicableTradeTax','ram:ApplicableCITradeTax')
	record = record.replace('ram:AssociatedDocumentLineDocument','ram:AssociatedCIILDocumentLineDocument')
	record = record.replace('ram:BuyerTradeParty','ram:BuyerCITradeParty')
	record = record.replace('ram:DefinedTradeContact','ram:DefinedCITradeContact')
	record = record.replace('ram:GuidelineSpecifiedDocumentContextParameter','ram:GuidelineSpecifiedCIDocumentContextParameter')
	record = record.replace('ram:IncludedNote','ram:IncludedCINote')
	record = record.replace('ram:IncludedSupplyChainTradeLineItem','ram:IncludedCIILSupplyChainTradeLineItem')
	record = record.replace('ram:NetPriceProductTradePrice','ram:NetPriceProductCITradePrice')
	record = record.replace('ram:PayeePartyCreditorFinancialAccount','ram:PayeePartyCICreditorFinancialAccount')
	record = record.replace('ram:PostalTradeAddress','ram:PostalCITradeAddress')
	record = record.replace('ram:SellerTradeParty','ram:SellerCITradeParty')
	record = record.replace('ram:SpecifiedLegalOrganization','ram:SpecifiedCILegalOrganization')
	record = record.replace('ram:SpecifiedLineTradeAgreement','ram:SpecifiedCIILSupplyChainTradeAgreement')
	record = record.replace('ram:SpecifiedLineTradeDelivery','ram:SpecifiedCIILSupplyChainTradeDelivery')
	record = record.replace('ram:SpecifiedLineTradeSettlement','ram:SpecifiedCIILSupplyChainTradeSettlement')
	record = record.replace('ram:SpecifiedTaxRegistration','ram:SpecifiedCITaxRegistration')
	record = record.replace('ram:SpecifiedTradePaymentTerms','ram:SpecifiedCITradePaymentTerms')
	record = record.replace('ram:SpecifiedTradeProduct','ram:SpecifiedCITradeProduct')
	record = record.replace('ram:SpecifiedTradeSettlementHeaderMonetarySummation','ram:SpecifiedCIIHTradeSettlementMonetarySummation')
	record = record.replace('ram:SpecifiedTradeSettlementLineMonetarySummation','ram:SpecifiedCIILTradeSettlementMonetarySummation')
	record = record.replace('ram:SpecifiedTradeSettlementPaymentMeans','ram:SpecifiedCITradeSettlementPaymentMeans')
	record = record.replace('rsm:CrossIndustryInvoice','rsm:SMEinvoice')
	record = record.replace('rsm:ExchangedDocumentContext','rsm:CIExchangedDocumentContext')
	record = record.replace('rsm:ExchangedDocument','rsm:CIIHExchangedDocument')
	record = record.replace('rsm:SupplyChainTradeTransaction','rsm:CIIHSupplyChainTradeTransaction')
	return record

if __name__ == '__main__':
	files = os.listdir(DIR)

	for file in files:
		if not 'CII' in file:
			continue
		sme_file = file.replace('CII','SME')
		lines =[]
		with open(file_path(f'{DIR}{SEP}{file}'), encoding='utf-8', newline='') as f:
			records = f.readlines()
		for record in records:
			record = convert_record(record)
			lines.append(record)
		
		with open(file_path(f'{DIR}{SEP}{sme_file}'), 'w', encoding='utf_8', newline='') as f:
			f.writelines(lines)

		print(sme_file)
	print(f'END {DIR}')

