package wuwei.japan_core.utils;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * A generic JSON handler class for reading and writing JSON files and maps using Simple-JSON.
 * Generated by ChatGPT 2023-04-17
 */
/**
 * Simple-JSONを使用してJSONファイルとマップの読み書きを行うための汎用的なJSONハンドラークラス。
 */
public class JSONHandler {
    
    private JSONParser parser;
    
    /**
     * Constructor for the JSONHandler class.
     */
    /**
     * JSONHandlerクラスのコンストラクター。
     */
    public JSONHandler() {
        parser = new JSONParser();
    }
    
    /**
     * Reads in a JSON file and converts it to a Map<String, Object> data structure.
     * @param filename The name of the JSON file to read in.
     * @return A Map<String, Object> representing the data in the JSON file, or null if there was an error.
     */
    /**
     * JSONファイルを読み込み、Map<String, Object>のデータ構造に変換する。
     * @param filename 読み込むJSONファイルの名前。
     * @return JSONファイルのデータを表すMap<String, Object>。エラーがあった場合はnullを返す。
     */
    public Map<String, Object> parseJSONFile(String filename) {
        try {
            FileReader reader = new FileReader(filename);
            Object obj = parser.parse(reader);
            JSONObject jsonObj = (JSONObject) obj;
            return convertJSONObjectToMap(jsonObj);
        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    /**
     * Writes a Map<String, Object> data structure to a JSON file.
     * @param filename The name of the JSON file to write to.
     * @param data The Map<String, Object> data structure to write to the file.
     */
    /**
     * Map<String, Object>のデータ構造をJSONファイルに書き込む。
     * @param data ファイルに書き込むMap<String, Object>のデータ構造。
     * @param filename 書き込むJSONファイルの名前。
     */
    public static void writeJSONToFile(Map<String, Object> data, String filename) {
        try {
            FileWriter writer = new FileWriter(filename);
            JSONObject jsonObj = convertMapToJSONObject(data);
            String s = jsonObj.toJSONString();
            s = s.replaceAll("\\\\/","/");
            writer.write(s);
            writer.flush();
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Helper method to recursively convert a JSONObject to a Map<String, Object>.
     * @param jsonObj The JSONObject to convert.
     * @return A Map<String, Object> representing the data in the JSONObject.
     */
    /**
     * 再帰的にJSONObjectをMap<String, Object>に変換するためのヘルパーメソッド。
     * @param jsonObj 変換するJSONObject。
     * @return JSONObjectのデータを表すMap<String, Object>。
     */
    public static Map<String, Object> convertJSONObjectToMap(JSONObject jsonObj) {
        Map<String, Object> map = new HashMap<>();
        for (Object key : jsonObj.keySet()) {
            Object value = jsonObj.get(key);
            if (value instanceof JSONObject) {
                value = convertJSONObjectToMap((JSONObject) value);
            }
            map.put((String) key, value);
        }
        return map;
    }
    
    /**
     * Helper method to recursively convert a Map<String, Object> to a JSONObject.
     * @param map The Map<String, Object> to convert.
     * @return A JSONObject representing the data in the Map<String, Object>.
     */
    /**
     * 再帰的にMap<String, Object>をJSONObjectに変換するためのヘルパーメソッド。
     * @param map 変換するMap<String, Object>。
     * @return Map<String, Object>のデータを表すJSONObject。
     */
    @SuppressWarnings("unchecked")
	public static JSONObject convertMapToJSONObject(Map<String, Object> map) {
        JSONObject jsonObj = new JSONObject();
        for (String key : map.keySet()) {
            Object value = map.get(key);
            if (value instanceof Map) {
                value = convertMapToJSONObject((Map<String, Object>) value);
            }
            jsonObj.put(key, value);
        }
        return jsonObj;
    }
}
/**
Sure! Here are some sample code snippets using the JSONHandler class:

1. To read in a JSON file and convert it to a Map<String, Object>:

JSONHandler handler = new JSONHandler();
Map<String, Object> data = handler.parseJSONFile("data.json");

2. To write a Map<String, Object> to a JSON file:

JSONHandler handler = new JSONHandler();
Map<String, Object> data = new HashMap<>();
// Populate the map with data
handler.writeJSONToFile("data.json", data);

3. To convert a Map<String, Object> to a JSONObject:

JSONHandler handler = new JSONHandler();
Map<String, Object> data = new HashMap<>();
// Populate the map with data
JSONObject jsonObj = handler.convertMapToJSONObject(data);

4. To convert a JSONObject to a Map<String, Object>:

JSONHandler handler = new JSONHandler();
JSONObject jsonObj = new JSONObject();
// Populate the JSON object with data
Map<String, Object> data = handler.convertJSONObjectToMap(jsonObj);

Note that in these examples, data.json is the name of the JSON file to read in or write to. You'll need to replace this with the actual name of your JSON file. Additionally, you'll need to populate the Map<String, Object> or JSONObject with the actual data you want to read/write.
 */
